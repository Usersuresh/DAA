#include <stdio.h>
#include <stdbool.h>

#define MAX_VERTICES 100

int graph[MAX_VERTICES][MAX_VERTICES];
int color[MAX_VERTICES];
int numVertices;

// Function to check if the current coloring of the vertex is valid
bool isSafe(int v, int c) {
    for (int i = 0; i < numVertices; i++) {
        if (graph[v][i] && c == color[i]) {
            return false;
        }
    }
    return true;
}

// Recursive function to solve graph coloring problem
bool graphColoringUtil(int v, int numColors) {
    if (v == numVertices) {
        return true; // All vertices are colored
    }

    for (int c = 1; c <= numColors; c++) {
        if (isSafe(v, c)) {
            color[v] = c; // Assign color c to vertex v

            // Recur to assign colors to the rest of the vertices
            if (graphColoringUtil(v + 1, numColors)) {
                return true;
            }

            color[v] = 0; // Backtrack: Remove color from vertex v
        }
    }
    return false;
}

// Function to solve graph coloring problem
void graphColoring(int numColors) {
    if (!graphColoringUtil(0, numColors)) {
        printf("Graph cannot be colored with %d colors.\n", numColors);
        return;
    }

    printf("Vertices colored with assigned colors:\n");
    for (int i = 0; i < numVertices; i++) {
        printf("Vertex %d: Color %d\n", i, color[i]);
    }
}

int main() {
    int numEdges, src, dest, numColors;

    printf("Enter the number of vertices: ");
    scanf("%d", &numVertices);

    printf("Enter the number of edges: ");
    scanf("%d", &numEdges);

    printf("Enter the edges (src dest):\n");
    for (int i = 0; i < numEdges; i++) {
        scanf("%d %d", &src, &dest);
        graph[src][dest] = graph[dest][src] = 1; // Assuming undirected graph
    }

    printf("Enter the number of colors: ");
    scanf("%d", &numColors);

    graphColoring(numColors);

    return 0;
}
