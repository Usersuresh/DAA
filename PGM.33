#include <stdio.h>
#include <stdbool.h>

#define N 10 // Maximum value of N (change as needed)

int board[N][N]; // Chessboard
int n;           // Number of Queens

// Function to check if a Queen can be placed at board[row][col]
bool isSafe(int row, int col) {
    int i, j;

    // Check the row on the left side
    for (i = 0; i < col; i++) {
        if (board[row][i]) {
            return false;
        }
    }

    // Check upper diagonal on left side
    for (i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j]) {
            return false;
        }
    }

    // Check lower diagonal on left side
    for (i = row, j = col; j >= 0 && i < n; i++, j--) {
        if (board[i][j]) {
            return false;
        }
    }

    return true; // If no conflicts, return true
}

// Recursive function to solve N Queens problem
bool solveNQueens(int col) {
    if (col >= n) {
        return true; // All Queens are placed
    }

    for (int i = 0; i < n; i++) {
        if (isSafe(i, col)) {
            // Place Queen on this row
            board[i][col] = 1;

            // Recur to place rest of the Queens
            if (solveNQueens(col + 1)) {
                return true;
            }

            // If placing Queen in board[i][col] doesn't lead to a solution, then remove Queen from board[i][col]
            board[i][col] = 0; // Backtrack
        }
    }

    return false; // If Queen can't be placed in any row in this column, then return false
}

// Function to print the solution
void printSolution() {
    printf("Solution found:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d ", board[i][j]);
        }
        printf("\n");
    }
}

int main() {
    printf("Enter the number of Queens (N): ");
    scanf("%d", &n);

    // Initialize chessboard
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            board[i][j] = 0; // 0 represents an empty cell
        }
    }

    if (solveNQueens(0)) {
        printSolution();
    } else {
        printf("Solution does not exist for %d Queens\n", n);
    }

    return 0;
}
